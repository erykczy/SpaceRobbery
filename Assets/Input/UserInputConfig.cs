//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/UserInputConfig.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputConfig: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputConfig()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputConfig"",
    ""maps"": [
        {
            ""name"": ""UnitManagement"",
            ""id"": ""4db916a1-3706-440d-829e-214cfc3481c9"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""3f1a8c64-a2bc-4174-ac37-1bb43a1b0de5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlanTargets"",
                    ""type"": ""Button"",
                    ""id"": ""0ebe645f-acd1-4b93-a34a-23a6a59d072b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c18a164-8257-47dd-b6f6-e3ecb515f73c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b60f0f3-68cd-40f3-9094-ae6fec72fd73"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlanTargets"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameScene"",
            ""id"": ""c6f5e61b-559e-4b56-8ef8-be803cd81f9a"",
            ""actions"": [
                {
                    ""name"": ""ContinueOrReset"",
                    ""type"": ""Button"",
                    ""id"": ""69443782-d7d8-4f0d-84be-4d8c20894c6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EscapeMenu"",
                    ""type"": ""Button"",
                    ""id"": ""d960d35e-78b3-45af-a101-6c51e491e054"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""792bde46-1792-488c-bcff-e465d7260430"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContinueOrReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9731b29-95eb-4603-938b-66921ef510d9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EscapeMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UnitManagement
        m_UnitManagement = asset.FindActionMap("UnitManagement", throwIfNotFound: true);
        m_UnitManagement_Select = m_UnitManagement.FindAction("Select", throwIfNotFound: true);
        m_UnitManagement_PlanTargets = m_UnitManagement.FindAction("PlanTargets", throwIfNotFound: true);
        // GameScene
        m_GameScene = asset.FindActionMap("GameScene", throwIfNotFound: true);
        m_GameScene_ContinueOrReset = m_GameScene.FindAction("ContinueOrReset", throwIfNotFound: true);
        m_GameScene_EscapeMenu = m_GameScene.FindAction("EscapeMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UnitManagement
    private readonly InputActionMap m_UnitManagement;
    private List<IUnitManagementActions> m_UnitManagementActionsCallbackInterfaces = new List<IUnitManagementActions>();
    private readonly InputAction m_UnitManagement_Select;
    private readonly InputAction m_UnitManagement_PlanTargets;
    public struct UnitManagementActions
    {
        private @UserInputConfig m_Wrapper;
        public UnitManagementActions(@UserInputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_UnitManagement_Select;
        public InputAction @PlanTargets => m_Wrapper.m_UnitManagement_PlanTargets;
        public InputActionMap Get() { return m_Wrapper.m_UnitManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitManagementActions set) { return set.Get(); }
        public void AddCallbacks(IUnitManagementActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @PlanTargets.started += instance.OnPlanTargets;
            @PlanTargets.performed += instance.OnPlanTargets;
            @PlanTargets.canceled += instance.OnPlanTargets;
        }

        private void UnregisterCallbacks(IUnitManagementActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @PlanTargets.started -= instance.OnPlanTargets;
            @PlanTargets.performed -= instance.OnPlanTargets;
            @PlanTargets.canceled -= instance.OnPlanTargets;
        }

        public void RemoveCallbacks(IUnitManagementActions instance)
        {
            if (m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitManagementActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitManagementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitManagementActions @UnitManagement => new UnitManagementActions(this);

    // GameScene
    private readonly InputActionMap m_GameScene;
    private List<IGameSceneActions> m_GameSceneActionsCallbackInterfaces = new List<IGameSceneActions>();
    private readonly InputAction m_GameScene_ContinueOrReset;
    private readonly InputAction m_GameScene_EscapeMenu;
    public struct GameSceneActions
    {
        private @UserInputConfig m_Wrapper;
        public GameSceneActions(@UserInputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContinueOrReset => m_Wrapper.m_GameScene_ContinueOrReset;
        public InputAction @EscapeMenu => m_Wrapper.m_GameScene_EscapeMenu;
        public InputActionMap Get() { return m_Wrapper.m_GameScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameSceneActions set) { return set.Get(); }
        public void AddCallbacks(IGameSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_GameSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameSceneActionsCallbackInterfaces.Add(instance);
            @ContinueOrReset.started += instance.OnContinueOrReset;
            @ContinueOrReset.performed += instance.OnContinueOrReset;
            @ContinueOrReset.canceled += instance.OnContinueOrReset;
            @EscapeMenu.started += instance.OnEscapeMenu;
            @EscapeMenu.performed += instance.OnEscapeMenu;
            @EscapeMenu.canceled += instance.OnEscapeMenu;
        }

        private void UnregisterCallbacks(IGameSceneActions instance)
        {
            @ContinueOrReset.started -= instance.OnContinueOrReset;
            @ContinueOrReset.performed -= instance.OnContinueOrReset;
            @ContinueOrReset.canceled -= instance.OnContinueOrReset;
            @EscapeMenu.started -= instance.OnEscapeMenu;
            @EscapeMenu.performed -= instance.OnEscapeMenu;
            @EscapeMenu.canceled -= instance.OnEscapeMenu;
        }

        public void RemoveCallbacks(IGameSceneActions instance)
        {
            if (m_Wrapper.m_GameSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_GameSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameSceneActions @GameScene => new GameSceneActions(this);
    public interface IUnitManagementActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnPlanTargets(InputAction.CallbackContext context);
    }
    public interface IGameSceneActions
    {
        void OnContinueOrReset(InputAction.CallbackContext context);
        void OnEscapeMenu(InputAction.CallbackContext context);
    }
}
